searchState.loadedDescShard("gd_rehearse", 0, "Framework for testing and benchmarking <code>godot-rust</code>…\nTests and benchmark runner for custom Godot classes …\nContains all symbols necessary to use <code>#[gdbench]</code> macro.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains all symbols necessary to use <code>#[gditest]</code> macro.\nContext for Rust Benchmarking case.\nRust benchmark.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBenchmark for gdext classes and functions integrated with …\nGets node from current benchmark context that was set up.\nGets node from current benchmark context that was set up, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemoves single node added during the setup procedure.\nRemoves all nodes added during the setup procedure.\nGet access to current scene tree.\nAdd node to scene in which the benchmark will be processed.\nRust test case.\nOptional test context for <code>#[gditest]</code>.\nIf one or more tests are focused, only they will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nIntegration test between Godot and Rust.\nGets node located at <code>path</code>, relatively to GdTestRunner.\nGets node located at <code>path</code>, relatively to GdTestRunner.\nGets node located at <code>path</code>, relatively to GdTestRunner, …\nGets node located at <code>path</code>, relatively to GdTestRunner, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed in conjuction with set\nGet access to current scene tree.")